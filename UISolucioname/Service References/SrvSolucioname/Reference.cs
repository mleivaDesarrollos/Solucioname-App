//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UISolucioname.SrvSolucioname {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Mensaje", Namespace="http://schemas.datacontract.org/2004/07/Servicio_Principal")]
    [System.SerializableAttribute()]
    public partial class Mensaje : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContenidoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Entidades.Operador RemitenteField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contenido {
            get {
                return this.ContenidoField;
            }
            set {
                if ((object.ReferenceEquals(this.ContenidoField, value) != true)) {
                    this.ContenidoField = value;
                    this.RaisePropertyChanged("Contenido");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Entidades.Operador Remitente {
            get {
                return this.RemitenteField;
            }
            set {
                if ((object.ReferenceEquals(this.RemitenteField, value) != true)) {
                    this.RemitenteField = value;
                    this.RaisePropertyChanged("Remitente");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SrvSolucioname.IServicio", CallbackContract=typeof(UISolucioname.SrvSolucioname.IServicioCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IServicio {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicio/Conectar", ReplyAction="http://tempuri.org/IServicio/ConectarResponse")]
        bool Conectar(Entidades.Operador oper);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicio/Conectar", ReplyAction="http://tempuri.org/IServicio/ConectarResponse")]
        System.Threading.Tasks.Task<bool> ConectarAsync(Entidades.Operador oper);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicio/EjecutarComando")]
        void EjecutarComando(Entidades.Operador oper, string sCmd);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicio/EjecutarComando")]
        System.Threading.Tasks.Task EjecutarComandoAsync(Entidades.Operador oper, string sCmd);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicio/Mensaje")]
        void Mensaje(UISolucioname.SrvSolucioname.Mensaje m);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicio/EnviarAsunto")]
        void EnviarAsunto(Entidades.Asunto a);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioChannel : UISolucioname.SrvSolucioname.IServicio, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioClient : System.ServiceModel.DuplexClientBase<UISolucioname.SrvSolucioname.IServicio>, UISolucioname.SrvSolucioname.IServicio {
        
        public ServicioClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServicioClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServicioClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Conectar(Entidades.Operador oper) {
            return base.Channel.Conectar(oper);
        }
        
        public System.Threading.Tasks.Task<bool> ConectarAsync(Entidades.Operador oper) {
            return base.Channel.ConectarAsync(oper);
        }
        
        public void EjecutarComando(Entidades.Operador oper, string sCmd) {
            base.Channel.EjecutarComando(oper, sCmd);
        }
        
        public System.Threading.Tasks.Task EjecutarComandoAsync(Entidades.Operador oper, string sCmd) {
            return base.Channel.EjecutarComandoAsync(oper, sCmd);
        }
    }
}
